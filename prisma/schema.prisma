// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
  // output   = "./generated/client"
}

generator pothos {
  provider     = "prisma-pothos-types"
  clientOutput = "./generated/client"
  output       = "../generated/pothos-types.ts"
}

generator pothosCrud {
  provider = "prisma-generator-pothos-codegen"
  output   = "../generated"
  inputs   = "../generated/inputs.ts"
  objects  = "../generated/objects.ts"
  autocrud = "../generated/autocrud.ts"
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

//////////////////////////
// Enums
//////////////////////////
enum Role {
  USER
  ADMIN
  MODERATOR
}

enum KycStatus {
  PENDING
  APPROVED
  REJECTED
}

enum OrderType {
  MARKET
  LIMIT
}

enum OrderSide {
  BUY
  SELL
}

enum OrderStatus {
  PENDING
  EXECUTED
  CANCELLED
}

enum TransactionType {
  CREDIT
  DEBIT
}

//////////////////////////
// NextAuth Models
//////////////////////////
model Account {
  id                String  @id @default(cuid())
  userId            String  @map("user_id")
  type              String
  provider          String
  providerAccountId String  @map("provider_account_id")
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String   @id @default(cuid())
  email      String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

//////////////////////////
// Core Models
//////////////////////////
model User {
  id                 String               @id @default(uuid())
  name               String?
  email              String?              @unique
  emailVerified      DateTime?            @map("email_verified")
  password           String?
  image              String?
  phone              String?
  bio                String?
  role               Role                 @default(USER)
  isActive           Boolean              @default(true)
  kyc                KYC?
  tradingAccount     TradingAccount?
  accounts           Account[] // NextAuth relation
  sessions           Session[] // NextAuth relation
  createdAt          DateTime             @default(now())
  updatedAt          DateTime             @default(now()) @updatedAt
  clientId           String?              @unique @map("client_id")
  PasswordResetToken PasswordResetToken[]
  Watchlist          Watchlist[]

  @@map("users")
}

model KYC {
  id            String    @id @default(uuid())
  userId        String    @unique
  user          User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  aadhaarNumber String
  panNumber     String
  bankProofUrl  String
  status        KycStatus @default(PENDING)
  submittedAt   DateTime  @default(now())
  approvedAt    DateTime?

  @@map("kyc")
}

model PasswordResetToken {
  id      String   @id @default(cuid())
  email   String
  token   String   @unique
  expires DateTime
  userId  String
  user    User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([email, token])
}

model Stock {
  id            String   @id @default(cuid())
  instrumentId  String   @unique
  exchange      String
  ticker        String
  name          String
  ltp           Float    @default(0)
  open          Float    @default(0)
  high          Float    @default(0)
  low           Float    @default(0)
  close         Float    @default(0)
  volume        Int      @default(0)
  change        Float    @default(0)
  changePercent Float    @default(0)
  sector        String?
  isActive      Boolean  @default(true)
  createdAt     DateTime @default(now())
  updatedAt     DateTime @default(now()) @updatedAt()

  watchlistItems WatchlistItem[]
  orders         Order[]
  positions      Position[]
}

model Watchlist {
  id        String   @id @default(uuid())
  userId    String
  name      String   @default("My Watchlist")
  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  user  User            @relation(fields: [userId], references: [id], onDelete: Cascade)
  items WatchlistItem[]

  @@unique([userId, name])
}

model WatchlistItem {
  id          String   @id @default(cuid())
  watchlistId String
  stockId     String
  createdAt   DateTime @default(now())

  watchlist Watchlist @relation(fields: [watchlistId], references: [id], onDelete: Cascade)
  stock     Stock     @relation(fields: [stockId], references: [id], onDelete: Cascade)

  @@unique([watchlistId, stockId])
}

model TradingAccount {
  id              String   @id @default(uuid())
  userId          String   @unique
  user            User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  balance         Int      @default(0)
  availableMargin Int      @default(0)
  usedMargin      Int      @default(0)
  clientId        String?  @unique @map("client_id")
  createdAt       DateTime @default(now())
  updatedAt       DateTime @default(now()) @updatedAt

  orders    Order[]
  positions Position[]
  trades    Transaction[]

  @@map("trading_accounts")
}

model Order {
  id               String      @id @default(uuid())
  tradingAccountId String
  symbol           String
  quantity         Int
  orderType        OrderType
  orderSide        OrderSide
  price            Decimal?    @db.Decimal(10, 2)
  filledQuantity   Int         @default(0)
  averagePrice     Decimal?    @db.Decimal(10, 2)
  productType      String      @default("MIS")
  status           OrderStatus @default(PENDING)
  createdAt        DateTime    @default(now())
  executedAt       DateTime?

  tradingAccount TradingAccount @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade)
  Stock          Stock?         @relation(fields: [stockId], references: [id])
  stockId        String?
  Position       Position?      @relation(fields: [positionId], references: [id])
  positionId     String?

  @@map("orders")
}

model Transaction {
  id               String          @id @default(uuid())
  tradingAccountId String
  amount           Decimal         @db.Decimal(18, 2)
  type             TransactionType
  description      String?
  createdAt        DateTime        @default(now())

  tradingAccount TradingAccount @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade)

  @@map("transactions")
}

model Position {
  id               String   @id @default(uuid())
  tradingAccountId String
  symbol           String
  quantity         Int
  averagePrice     Decimal  @db.Decimal(10, 2)
  unrealizedPnL    Decimal  @default(0) @db.Decimal(18, 2)
  dayPnL           Decimal  @default(0) @db.Decimal(18, 2)
  stopLoss         Decimal? @db.Decimal(10, 2)
  target           Decimal? @db.Decimal(10, 2)
  createdAt        DateTime @default(now())

  tradingAccount TradingAccount @relation(fields: [tradingAccountId], references: [id], onDelete: Cascade)
  Stock          Stock?         @relation(fields: [stockId], references: [id])
  stockId        String?
  orders         Order[]

  @@unique([tradingAccountId, symbol])
  @@map("positions")
}

model VortexSession {
  id          Int      @id @default(autoincrement())
  userId      Int // agar aapke paas users table hai
  accessToken String
  createdAt   DateTime @default(now())
  updatedAt   DateTime @default(now()) @updatedAt
}
